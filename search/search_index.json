{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation of a project called RoomCreator. RoomCreator is intended to be a VR application running on the standalone VR headset Oculus Quest. Within RoomCreator it will be possible to create a virtual room where various assets can be placed. It should also be possible to invite other users of the application into the virtual room for a shared session.","title":"Home"},{"location":"development-environment/","text":"Development Environment \u00b6 This is not really meant as an explanation on how to build this specific project. It's also not a real tutorial, It's probably better if you stick to the official tutorial by Oculus. This is more of a learning log as I'm creating my first VR unity project. It might help me to see how or why I did a thing :P. Unity \u00b6 https://developer.oculus.com/documentation/unity/book-unity-gsg/ Install Unity \u00b6 Unity Hub 2.3.1 Unity Version 2019.3.14f1, installed via Unity Hub on OS X. Additional Modules installed Android Build Support (Android SDK & NDK, OpenJDK) Mac Build Support (probably not needed for Oculus Quest) Documentation Create new project \u00b6 Select \"3D Project\" Stored project in ../unity sub folder Added unity .gitignore to ignore thousands of generated files ;-) Enable device for testing \u00b6 https://developer.oculus.com/documentation/unity/unity-enable-device/ Enable developer mode on Oculus Quest. (Oculus App -> Settings -> Select Headset -> More Settings -> Developer Mode) Connect device with USB & confirm dialog in headset Verify that headset is visible in Unity. (Unity -> File -> Build Settings -> Android -> Run Device) \"Build And Run\" to verify everything is working. This launches a 2D scene.. I've skipped the ADB part of the instructions since I don't expect to need this right now. Import Oculus Quest Integration Package \u00b6 https://developer.oculus.com/documentation/unity/unity-import/ Open Asset store and search for \"Oculus Integration\" -> Download -> Import (keep everything selected) Select upgrade & restart whenever asked add third party assets to .gitignore. I'll try to ignore any third party assets and hopefully I'll still be able to use git to rollback unwanted changes etc. It's a bit of a pain to manage that. I've considered creating a private repo for the whole project but I kinda like being able to share code snippets.. so I'll try to ignore any third party files for now and see how it goes. Configure Unity project \u00b6 https://developer.oculus.com/documentation/unity/unity-conf-settings/ Build Settings \u00b6 Unity -> File -> Build Settings Texture Compression: ASTC Setting this seems to prompt unity to do a bunch of re-indexing.. so I had time to read what ASTC actually is Run device: the oculus quest headset obviously Development build: enable for now, disable for final build Click Switch Platform if a notice pops up Project Settings \u00b6 Edit -> Project Settings -> Player Company Name: Sixty Meters Product Name: RoomCreator Version: 0.1 Android -> Other Settings Package Name: com.SixtyMeters.RoomCreator Version: 0.1 Minimum API Level: Android 6.0 (L23) for Oculus Quest Target API Level: Automatic Install location: Automatic Edit -> Project Settings -> XR Plugin Management -> Install XR Plugin Management Android Enable Oculus (this takes a while as well) Edit -> Project Settings -> Player -> Android -> Other Settings Color Space: Linear Disable Auto Graphics API, instead use OpenGL ES3.0, Vulkan (experimental as of 2020) Enable Multithreaded Rendering Enable Low Overhead Mode (couldn't find this option) Edit -> Project Settings -> Quality Pixel Light Count: 1 Texture Quality: Full Res Anisotropic Textures: Per Texture Anti Aliasing: 4x Disable Soft Particles Enable Realtime Reflection Probes Enable Billboards Face Camera Generate Android Manifest: Oculus -> Tools -> Create store-compatible Android Manifest","title":"Development Environment"},{"location":"development-environment/#development-environment","text":"This is not really meant as an explanation on how to build this specific project. It's also not a real tutorial, It's probably better if you stick to the official tutorial by Oculus. This is more of a learning log as I'm creating my first VR unity project. It might help me to see how or why I did a thing :P.","title":"Development Environment"},{"location":"development-environment/#unity","text":"https://developer.oculus.com/documentation/unity/book-unity-gsg/","title":"Unity"},{"location":"development-environment/#install-unity","text":"Unity Hub 2.3.1 Unity Version 2019.3.14f1, installed via Unity Hub on OS X. Additional Modules installed Android Build Support (Android SDK & NDK, OpenJDK) Mac Build Support (probably not needed for Oculus Quest) Documentation","title":"Install Unity"},{"location":"development-environment/#create-new-project","text":"Select \"3D Project\" Stored project in ../unity sub folder Added unity .gitignore to ignore thousands of generated files ;-)","title":"Create new project"},{"location":"development-environment/#enable-device-for-testing","text":"https://developer.oculus.com/documentation/unity/unity-enable-device/ Enable developer mode on Oculus Quest. (Oculus App -> Settings -> Select Headset -> More Settings -> Developer Mode) Connect device with USB & confirm dialog in headset Verify that headset is visible in Unity. (Unity -> File -> Build Settings -> Android -> Run Device) \"Build And Run\" to verify everything is working. This launches a 2D scene.. I've skipped the ADB part of the instructions since I don't expect to need this right now.","title":"Enable device for testing"},{"location":"development-environment/#import-oculus-quest-integration-package","text":"https://developer.oculus.com/documentation/unity/unity-import/ Open Asset store and search for \"Oculus Integration\" -> Download -> Import (keep everything selected) Select upgrade & restart whenever asked add third party assets to .gitignore. I'll try to ignore any third party assets and hopefully I'll still be able to use git to rollback unwanted changes etc. It's a bit of a pain to manage that. I've considered creating a private repo for the whole project but I kinda like being able to share code snippets.. so I'll try to ignore any third party files for now and see how it goes.","title":"Import Oculus Quest Integration Package"},{"location":"development-environment/#configure-unity-project","text":"https://developer.oculus.com/documentation/unity/unity-conf-settings/","title":"Configure Unity project"},{"location":"development-environment/#build-settings","text":"Unity -> File -> Build Settings Texture Compression: ASTC Setting this seems to prompt unity to do a bunch of re-indexing.. so I had time to read what ASTC actually is Run device: the oculus quest headset obviously Development build: enable for now, disable for final build Click Switch Platform if a notice pops up","title":"Build Settings"},{"location":"development-environment/#project-settings","text":"Edit -> Project Settings -> Player Company Name: Sixty Meters Product Name: RoomCreator Version: 0.1 Android -> Other Settings Package Name: com.SixtyMeters.RoomCreator Version: 0.1 Minimum API Level: Android 6.0 (L23) for Oculus Quest Target API Level: Automatic Install location: Automatic Edit -> Project Settings -> XR Plugin Management -> Install XR Plugin Management Android Enable Oculus (this takes a while as well) Edit -> Project Settings -> Player -> Android -> Other Settings Color Space: Linear Disable Auto Graphics API, instead use OpenGL ES3.0, Vulkan (experimental as of 2020) Enable Multithreaded Rendering Enable Low Overhead Mode (couldn't find this option) Edit -> Project Settings -> Quality Pixel Light Count: 1 Texture Quality: Full Res Anisotropic Textures: Per Texture Anti Aliasing: 4x Disable Soft Particles Enable Realtime Reflection Probes Enable Billboards Face Camera Generate Android Manifest: Oculus -> Tools -> Create store-compatible Android Manifest","title":"Project Settings"},{"location":"first-scene/","text":"The first scene \u00b6 My first task is to get a simple scene that I can walk around in Room-scale. I don't really want game locomotion or anything else yet. To set this up is simple enough. Create a new Scene Add OVRCameraRig and remove the default Unity camera. Add a floor and a bunch of objects Open Build Settings and click \"Add Open Scenes\" Build & Run","title":"The first scene"},{"location":"first-scene/#the-first-scene","text":"My first task is to get a simple scene that I can walk around in Room-scale. I don't really want game locomotion or anything else yet. To set this up is simple enough. Create a new Scene Add OVRCameraRig and remove the default Unity camera. Add a floor and a bunch of objects Open Build Settings and click \"Add Open Scenes\" Build & Run","title":"The first scene"},{"location":"roadmap/","text":"Roadmap \u00b6 Milestone 1: Development Setup \u00b6 Setup Unity Configure standard project settings Build & run a simple scene containing a few objects Milestone 2: Move objects \u00b6 Move objects in scene with controllers Add self-made 3d objects Add a menu to spawn objects Enable player to lock/glue some objects to disable physics for them Milestone 3: Persistence \u00b6 Save room Load room Create multiple rooms Milestone 4: Multiplayer \u00b6 Enable Oculus Avatar (?) Add networking support Add server for backend Basic joining over 5 digit code Use Oculus friends list to join, if this is possible for unknown sources applications","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"","title":"Roadmap"},{"location":"roadmap/#milestone-1-development-setup","text":"Setup Unity Configure standard project settings Build & run a simple scene containing a few objects","title":"Milestone 1: Development Setup"},{"location":"roadmap/#milestone-2-move-objects","text":"Move objects in scene with controllers Add self-made 3d objects Add a menu to spawn objects Enable player to lock/glue some objects to disable physics for them","title":"Milestone 2: Move objects"},{"location":"roadmap/#milestone-3-persistence","text":"Save room Load room Create multiple rooms","title":"Milestone 3: Persistence"},{"location":"roadmap/#milestone-4-multiplayer","text":"Enable Oculus Avatar (?) Add networking support Add server for backend Basic joining over 5 digit code Use Oculus friends list to join, if this is possible for unknown sources applications","title":"Milestone 4: Multiplayer"}]}